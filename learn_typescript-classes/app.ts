// Learn Classes
// 1. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Code ‡∏ï‡∏≤‡∏° Video ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Class ‡πÅ‡∏•‡∏∞ Interface ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

// 2. ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° code ‡πÉ‡∏ô Function ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô work() ‡∏´‡∏£‡∏∑‡∏≠ sleep() ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Class ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Implement function ‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Code console.log() ‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô work() ‡∏Ç‡∏≠‡∏á Programmer ‡πÉ‡∏´‡πâ ‡∏°‡∏µ code console.log("Programmer Work")

// 3. ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö code ‡∏Ç‡∏≠‡∏á Programmer work() ‡πÅ‡∏•‡∏∞ CTO work()

interface Workable {
    work(): void;
}

class Programmer implements Workable {
    private firstName: string;
    private lastName: string;
    private position: string;
    constructor(firstName: string, lastName: string, position: string) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.position = position;
    }
    work(){
        console.log(`Programmer name: ${this.firstName} ${this.lastName} at Position: ${this.position} still Working üë®‚Äçüíª`);
    }
}

class CTO implements Workable {
    private name: string;
    constructor(name: string) {
        this.name = name;
    }
    work() {
        console.log(`CTO ${this.name} still Working üíÅ‚Äç‚ôÇÔ∏è`);
    }
}

let john = new Programmer("John", "Doe", "Frontend Developer");
john.work();

let boss = new CTO("Boss Baby");
boss.work();